import tika
from tika import parser
import fitz
import PyPDF2
import re
from collections import defaultdict
from IPython.utils import encoding
from prompt_toolkit.filters.cli import shift_selection_mode
import dateparser
from datetime import date
import pymssql
import pandas as pd
conn = pymssql.connect('edit this to your mysql database ipaddress')
cursor = conn.cursor(as_dict=True)
cursor.execute('SELECT  lower(CaChargeCode) as CaChargeCode, ChargeID FROM carcharge where idcakey = 000008986')
charges = cursor.fetchall()
conn.close()
charges = pd.DataFrame(charges)


def tikaText(PDF: str):
    raw = parser.from_file(PDF)
    text = raw['content'].split('\n')
    return text

def findline(word, arr):
    for i in range(len(arr)):
        if word in arr[i]:
            return i
    return -1

def Text(pdf: str):
    with fitz.open(pdf) as doc:
        text = ""
        for page in doc:
            text += page.get_text()

    text = text.split('\n')

    file = open(pdf, 'rb')
    pdfReader = PyPDF2.PdfFileReader(file)
    totalPages = pdfReader.numPages

    return text, totalPages

def extract_shipper_address(text, start_index):
    for i in range(start_index + 3, len(text)):
        line = text[i]
        if re.match(r'^\d', line):  # Check if the line starts with a number
            shipper_address_match = re.search(r'^\d+\s+(.*?)\s+\d+', line)
            if shipper_address_match:
                return shipper_address_match.group(1)
    return None


def cleaned_text(pdf: str):
    text1, totalPages = Text(pdf)
    text = tikaText(pdf)
    cleaned_text = []
    cleaned_text1 = []
    line_cleaner = -1
    line_cleaner1 = -1
    for number, line in enumerate(text):
        if line_cleaner > 0:
            line_cleaner -= 1
        elif 'Page' in line and 'of' in line:
            line_cleaner = 19
        else:
            cleaned_text.append(line)

    for number, line in enumerate(text1):
        if line_cleaner1 > 0:
            line_cleaner1 -= 1
        elif 'Page' in line and 'of' in line:
            line_cleaner1 = 18
        else:
            cleaned_text1.append(line)

    sliced = cleaned_text[findline('Invoice Date:', cleaned_text):findline('** PAYABLE UPON RECEIPT **', cleaned_text)]

    constant_info = {}
    shipment_info = {}
    address_info = {}
    all_shipment_info = []
    for number, line in enumerate(sliced):
        invoice_date_match = re.search(r'(\d{2})/(\d{2})/(\d{4})', line)
        if invoice_date_match:
            month = invoice_date_match.group(1)
            day = invoice_date_match.group(2)
            year = invoice_date_match.group(3)
            invoice_date = f"{year}{month}{day}"
            constant_info['invoice_date'] = invoice_date
        if 'Invoice Number:' in line:
            invoice_number = sliced[number + 12]
            constant_info['invoice_number'] = invoice_number    
        if 'Invoice Date:' in line:
            carrier = sliced[number + 7]
            constant_info['carrier'] = carrier
        if 'TOTALENERGIES MARKETING CANADA INC' in line:
            customer_name = sliced[number]
            constant_info['customer_name'] = customer_name
            customer_address = sliced[number + 1]
            constant_info['customer_address'] = customer_address
            location = sliced[number + 2]
            parts = location.split()
            if len(parts) >= 3:
                customer_city = ' '.join(parts[0: -2])
                constant_info['customer_city'] = customer_city
                customer_province = parts[-2]
                constant_info['customer_province'] = customer_province
                customer_country = parts[-1]
                constant_info['customer_country'] = customer_country
            customer_postal = sliced[number + 3]
            constant_info['customer_postal'] = customer_postal



    for number, line in enumerate(cleaned_text):
        if 'SKD' in line:
            Bol2 = cleaned_text[number].split()[-1]
            address_info['Bol2'] = Bol2
        if 'SKD' in line:
            address_pattern = re.search(r'^(\d+\s+[^0-9]+)\s+(.*?)(?=\s+(?:\d+|Appointment|Gross Price|Lift Gate))',cleaned_text[number + 6])
            if address_pattern:
                shipper_address = address_pattern.group(1)
                consignee_address = address_pattern.group(2)
                address_info['shipper_address'] = shipper_address
                address_info['consignee_address'] = consignee_address

            location_pattern = re.search(r'(.+?CAN) (.+?CAN)',cleaned_text[number + 8])
            if location_pattern:
                location1 = location_pattern.group(1)
                parts = location1.split()
                if len(parts) >= 3:
                    shipper_city = ' '.join(parts[0: -2])
                    address_info['shipper_city'] = shipper_city
                    shipper_province = parts[-2]
                    address_info['shipper_province'] = shipper_province
                    shipper_country = parts[-1]
                    address_info['shipper_country'] = shipper_country
                location2 = location_pattern.group(2)
                parts = location2.split()
                if len(parts) >= 3:
                    consignee_city = ' '.join(parts[0: -2])
                    address_info['consignee_city'] = consignee_city
                    consignee_province = parts[-2]
                    address_info['consignee_province'] = consignee_province
                    consignee_country = parts[-1]
                    address_info['consignee_country'] = consignee_country
            
            dim_wgt_line = cleaned_text[number + 4].split('LTL')
            if len(dim_wgt_line) > 1:
                if dim_wgt_line[-1] != '':
                    dim_weight = dim_wgt_line[-1].replace(',', '')
                    address_info['dim_weight'] = dim_weight  
            postal_pattern = cleaned_text[number + 10].split( ' ')
            shipper_postal = ''.join(postal_pattern[0:2])
            consignee_postal = ''.join(postal_pattern[2:4])
            address_info['shipper_postal'] = shipper_postal
            address_info['consignee_postal'] = consignee_postal

            if 'consignee_postal' in address_info:
                all_shipment_info.append(address_info)
                address_info = {}
    constant_info['all_shipment_info'] = all_shipment_info
    
    acc_list = []
    for number, line in enumerate(cleaned_text1):
        if 'SKD' in line:
            BOL3 =  cleaned_text1[number + 2].strip()
        for charge in charges.CaChargeCode:
            if charge in line.lower():
                if 'Appointment Delivery' in line:
                    continue
                charge_name = charge
                charge_id = charges[charges.CaChargeCode == charge].ChargeID.values[0]
                value = cleaned_text1[number + 1]
                acc_entry = {'BOL3': BOL3, 'charge_name': charge_name, 'charge_value': value, 'charge_id': charge_id}
                acc_list.append(acc_entry)
                break
    constant_info['acc_list'] = acc_list


    for number, line in enumerate(cleaned_text1):
        if 'SKD' in line:
                Shipper_name = cleaned_text1[number - 2]
                consignee_name = cleaned_text1[number - 1]
                shipment_info['Shipper_name'] = Shipper_name 
                shipment_info['consignee_name'] = consignee_name

        if 'Total Shipments;' in line:
            net_charges = cleaned_text1[number + 2].strip()
            taxes = cleaned_text1[number + 3].strip()
            invoice_total = float(net_charges) + float(taxes)
            constant_info['invoice_total'] = invoice_total
        if 'SKD' in line:
            date_match = re.search(r'(\d{2})/(\d{2})/(\d{4})', cleaned_text1[number -4])
            if date_match:
                month = date_match.group(1)
                day = date_match.group(2)
                year = date_match.group(3)
                shipment_date = f"{year}{month}{day}"
            shipment_info['shipment_date'] = shipment_date
        if 'SKD' in line:
            pcs = cleaned_text1[number].split('SKD')[0].strip()
            shipment_info['PCS'] = pcs
        if 'SKD' in line:
            weight = cleaned_text1[number + 1].strip().replace(',', '')
            shipment_info['weight'] = weight
        if 'SKD' in line:
            BOL =  cleaned_text1[number + 2].strip()
            shipment_info['BOL'] = BOL
        if 'SKD' in line:
            base_charge = cleaned_text1[number + 4].strip()
            shipment_info['base'] = base_charge
        if 'SKD' in line:
            service_type = cleaned_text1[number + 7].strip()
            shipment_info['service_type'] = service_type
        if 'Fuel'in line and 'Fuel-Charge :' not in line:
            fuel = cleaned_text1[number + 1].strip()
            shipment_info['fuel'] = fuel
        if 'Total Charge' in line:
            total_charge = cleaned_text1[number + 1].strip()
            shipment_info['total_charge'] = total_charge
            
        if 'total_charge' in shipment_info:
                all_shipment_info.append(shipment_info)
                shipment_info = {}
    constant_info['all_shipment_info'] = all_shipment_info


    return constant_info

pdf_file_name = '31.pdf' #input('Enter the PDF file name: ')
pdf_name_without_extension = pdf_file_name.split('.')[0]
output_file_name = f'{pdf_name_without_extension}.txt'


constant_info = cleaned_text(pdf_file_name)

EDI_Output = open(output_file_name, 'w')
all_shipment_info = constant_info.get('all_shipment_info', [])
acc_list = constant_info.get('acc_list', [])


new_all_shipment_info = []
for shipment_info in all_shipment_info:
    Bol2 = shipment_info.get('Bol2', '')
    for address_shipment_info in all_shipment_info:
        if address_shipment_info.get('BOL', '') == Bol2:
            shipment_info.update(address_shipment_info)
            new_all_shipment_info.append(shipment_info)


invoice_number = constant_info.get('invoice_number', '')
invoice_date = constant_info.get('invoice_date', '')
invoice_total = constant_info.get('invoice_total', '')
formatted_invoice_total = "{:.2f}".format(invoice_total)
carrier = constant_info.get('carrier', '')
customer_name = constant_info.get('customer_name', '')
customer_address = constant_info.get('customer_address', '')
customer_city = constant_info.get('customer_city', '')
customer_province = constant_info.get('customer_province', '')
customer_postal = constant_info.get('customer_postal', '')
customer_country = constant_info.get('customer_country', '')

EDI = f'''ISA*00**00**ZZ*000008986*ZZ*000000145*20220908*1250*U*00401*000012253*0*P*~
GS*IM*000008986*000000145*20220908*125003*12248*X*004010~
ST*210*1000~
B3**{invoice_number}**MX**{invoice_date}*{formatted_invoice_total}****PRLA*~
C3*CAD~
N9*12*~
N9*BM*{carrier}~
N1*CS*{customer_name}~
N3*{customer_address}~
N4*{customer_city}*{customer_province}*{customer_postal}*{customer_country}~
'''

i = 0
lcounter = 1
for shipment_info in new_all_shipment_info:
    shipment_date = shipment_info.get('shipment_date', '')
    PCS = shipment_info.get('PCS', '')
    weight = shipment_info.get('weight', '')
    BOL = shipment_info.get('BOL', '')
    Shipper_name = shipment_info.get('Shipper_name', '')
    shipper_city = shipment_info.get('shipper_city', '')
    shipper_province = shipment_info.get('shipper_province', '')
    shipper_country = shipment_info.get('shipper_country', '')
    shipper_postal = shipment_info.get('shipper_postal', '')
    shipper_address = shipment_info.get('shipper_address', '')
    consignee_name = shipment_info.get('consignee_name', '')
    consignee_city = shipment_info.get('consignee_city', '')
    consignee_province = shipment_info.get('consignee_province', '')
    consignee_country = shipment_info.get('consignee_country', '')
    consignee_postal = shipment_info.get('consignee_postal', '')
    consignee_address = shipment_info.get('consignee_address', '')
    fuel = shipment_info.get('fuel', '')
    base = shipment_info.get('base', '')
    service_type = shipment_info.get('service_type', '')  
    dim_weight = shipment_info.get('dim_weight', '')
    total_charge = shipment_info.get('total_charge', '')

    i += 1
    lcounter = 1
    EDI += f'LX*{i}~\n'
    EDI += f"N9*BOL*{BOL}~\n"
    EDI += f"P1*{shipment_date}~\n"
    EDI += f"N1*SH*{Shipper_name}~\n"
    EDI += f"N3*{shipper_address}~\n"
    EDI += f"N4*{shipper_city}*{shipper_province}*{shipper_postal}*{shipper_country}*~\n"
    EDI += f"N1*CN*{consignee_name}~\n"
    EDI += f"N3*{consignee_address}~\n"
    EDI += f"N4*{consignee_city}*{consignee_province}*{consignee_postal}*{consignee_country}*~\n"
    EDI += f"L0*1***{weight}*B***{PCS}*SKD**LB~\n"
    if dim_weight:
        EDI += f"L0*2***{dim_weight}*A3******~\n"
    EDI += f"L1*{lcounter}***{base}****Bas*{service_type}~\n"
    lcounter += 1
    EDI += f"L1*{lcounter}***{fuel}****F*Fuel Surcharge~\n"
    lcounter += 1
    for acc in acc_list:
        if acc.get('BOL3', '') == BOL:
            charge_name = acc.get('charge_name', '')
            charge_value = acc.get('charge_value', '')
            charge_id = acc.get('charge_id', '')
            EDI += f"L1*{lcounter}***{charge_value}****{charge_id}*{charge_name}~\n"
            lcounter += 1
    EDI += f"L1*{lcounter}***{total_charge}****Total*Total~\n"



    
EDI += '''SE*10222*11217265~
GE*1*17856~
IEA*1*000017866~'''

EDI_Output.write(EDI)
EDI_Output.close()

print(f"EDI data generated and saved to '{output_file_name}'.")
